{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zroAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLPETHAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLPZROAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputReserve",
          "type": "uint256"
        }
      ],
      "name": "forecastOutputAmountfromSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapETHtoZRO",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zroAmount",
          "type": "uint256"
        }
      ],
      "name": "swapZROtoETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4b6fc666450325488d57d4614a83b111aa53c6637b807252b3d9aa4bae3428b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2306898",
    "logsBloom": "0x
    "blockHash": "0xd693fa6bea19492e5edd4c7db23dfcbba387c9038691662833a9672fbd6ce48a",
    "transactionHash": "0xf4b6fc666450325488d57d4614a83b111aa53c6637b807252b3d9aa4bae3428b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2306898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e3d259ae54d0b293e03a0af3b5bf800",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zroAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLPETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLPZROAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReserve\",\"type\":\"uint256\"}],\"name\":\"forecastOutputAmountfromSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapETHtoZRO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zroAmount\",\"type\":\"uint256\"}],\"name\":\"swapZROtoETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex.sol\":\"DecentralizedExchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract DecentralizedExchange is ERC20 {\\r\\n    \\r\\n    ERC20 zroToken;\\r\\n\\r\\n    constructor (address tokenAddress) ERC20(\\\"ZERO/ETH\\\", \\\"ZETH\\\") {\\r\\n        require(tokenAddress != address(0), \\\"Token address is zero address\\\");\\r\\n        zroToken = ERC20(tokenAddress);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount) public payable returns(uint256) {\\r\\n        require(msg.value > 0, \\\"No ETH Supplied\\\");\\r\\n        uint256 proportionalZETHRecieved;\\r\\n        uint256 _EthReserve = getTokenReserve();\\r\\n\\r\\n        // Initial Liquidity, we dont have to mantain a defined ratio\\r\\n        if (_EthReserve == 0 ) {\\r\\n            (bool success) = zroToken.transferFrom(msg.sender, address(this), tokenAmount);\\r\\n            require(success, \\\"Failed to transfer ZRO\\\");\\r\\n\\r\\n            proportionalZETHRecieved = address(this).balance;\\r\\n\\r\\n            _mint(msg.sender, proportionalZETHRecieved); \\r\\n        }\\r\\n        else{\\r\\n            _EthReserve = (address(this).balance) - msg.value;\\r\\n            uint256 _tokenReserve = getTokenReserve();\\r\\n            \\r\\n            /*\\r\\n            Liquitidy Ratio: inputZro/ZroReserve = msg.value/EthReserve\\r\\n                        : inputZro = (msg.vakue * zroReserve) / EthReserve\\r\\n            */\\r\\n\\r\\n            uint256 proportionalTokenAmount = (msg.value * _tokenReserve) / _EthReserve;\\r\\n            require(tokenAmount >= proportionalTokenAmount, \\\"Incorrect ratio of tokens provided\\\");\\r\\n            \\r\\n            (bool success) = zroToken.transferFrom(msg.sender, address(this), tokenAmount);\\r\\n            require(success, \\\"Failed to transfer ZRO\\\");\\r\\n\\r\\n            // same formula as Liquidity ratio\\r\\n            proportionalZETHRecieved = (totalSupply() * msg.value) / _EthReserve;\\r\\n            _mint(msg.sender, proportionalZETHRecieved);\\r\\n        }\\r\\n        return proportionalZETHRecieved;\\r\\n\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 _lpTokenAmount) public returns(uint256, uint256) {\\r\\n        /*\\r\\n            : EthReturned / EthReserve = lpTokenAmount/LpTotalSupply;\\r\\n            : EthReturned = (lpTokenAmount * EthReserve)/LpTotalSupply;\\r\\n        */\\r\\n        uint256 proportionalETHReturned = (_lpTokenAmount * address(this).balance) / totalSupply();\\r\\n        payable(msg.sender).transfer(proportionalETHReturned);\\r\\n\\r\\n        /*\\r\\n            : ZROReturned / ZROReserve = lpTokenAmount/LpTotalSupply;\\r\\n            : ZROReturned = (lpTokenAmount * ZROReserve)/LpTotalSupply;\\r\\n        */\\r\\n\\r\\n        uint256 proportionalZROReturned = (_lpTokenAmount * getTokenReserve()) / totalSupply();\\r\\n\\r\\n        //remove user lp tokens from supply, do not need to transfer since supply is infinite;\\r\\n        _burn(msg.sender, _lpTokenAmount);\\r\\n\\r\\n        (bool success) = zroToken.transfer(msg.sender, proportionalZROReturned);\\r\\n        require(success, \\\"Failed to transfer ZRO\\\");\\r\\n\\r\\n        return (proportionalETHReturned, proportionalZROReturned);\\r\\n        \\r\\n    }\\r\\n\\r\\n    //swap functions\\r\\n\\r\\n    /* \\r\\n        @params: input = token to swap , output = token to be recieved \\r\\n    */\\r\\n    function forecastOutputAmountfromSwap(uint256 inputAmount, uint256 inputReserve, uint256 outputReserve) public pure returns (uint256) {\\r\\n        require(inputReserve > 0  && outputReserve > 0, \\\"Dex reserves have to be greater than zero\\\");\\r\\n\\r\\n        // outputAmount = (outputReserve * inputAmount) / (inputReserve + inputAmount)\\r\\n        //5% fee\\r\\n        uint256 outputAmount = (outputReserve * (95 * inputAmount) ) / ( (100 * inputReserve) + ( 95 * inputAmount) );\\r\\n        return outputAmount;\\r\\n    }\\r\\n\\r\\n    function swapZROtoETH(uint256 zroAmount) public {\\r\\n        uint256 ETHAmountRecieved = forecastOutputAmountfromSwap (\\r\\n            zroAmount,\\r\\n            getTokenReserve(),\\r\\n            address(this).balance\\r\\n        );\\r\\n\\r\\n        zroToken.transferFrom(msg.sender, address(this), zroAmount);\\r\\n\\r\\n        payable(msg.sender).transfer(ETHAmountRecieved);\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapETHtoZRO() public payable {\\r\\n        uint256 zroAmountRecieved = forecastOutputAmountfromSwap(\\r\\n            msg.value,\\r\\n            (address(this).balance - msg.value),\\r\\n            getTokenReserve()\\r\\n        );\\r\\n\\r\\n        zroToken.transfer(msg.sender, zroAmountRecieved);\\r\\n    }\\r\\n    \\r\\n    //Pure function to calcute swap amounts;\\r\\n\\r\\n    function getEthReserve() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getTokenReserve() public view returns (uint256) {\\r\\n        return zroToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function calculateLPZROAmount(uint256 ethAmount) public view returns(uint256) {\\r\\n        uint256 _tokenReserve = zroToken.balanceOf(address(this));\\r\\n        uint256 _EthReserve = address(this).balance;\\r\\n        return ( (ethAmount * _tokenReserve) / _EthReserve );\\r\\n    }\\r\\n\\r\\n    function calculateLPETHAmount(uint256 zroAmount) public view returns(uint256) {\\r\\n        uint256 _tokenReserve = zroToken.balanceOf(address(this));\\r\\n        uint256 _EthReserve = address(this).balance;\\r\\n        return ( (zroAmount * _EthReserve) / _tokenReserve );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57b5a2704d1650ca100f4cfafec99f923febe4a5ed67ae1af47d93e543807acb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d6638038062002d668339818101604052810190620000379190620001ed565b6040518060400160405280600881526020017f5a45524f2f4554480000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5a455448000000000000000000000000000000000000000000000000000000008152508160039081620000b4919062000499565b508060049081620000c6919062000499565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200013290620005e1565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000603565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b58262000188565b9050919050565b620001c781620001a8565b8114620001d357600080fd5b50565b600081519050620001e781620001bc565b92915050565b60006020828403121562000206576200020562000183565b5b60006200021684828501620001d6565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002a157607f821691505b602082108103620002b757620002b662000259565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002e2565b6200032d8683620002e2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200037a620003746200036e8462000345565b6200034f565b62000345565b9050919050565b6000819050919050565b620003968362000359565b620003ae620003a58262000381565b848454620002ef565b825550505050565b600090565b620003c5620003b6565b620003d28184846200038b565b505050565b5b81811015620003fa57620003ee600082620003bb565b600181019050620003d8565b5050565b601f82111562000449576200041381620002bd565b6200041e84620002d2565b810160208510156200042e578190505b620004466200043d85620002d2565b830182620003d7565b50505b505050565b600082821c905092915050565b60006200046e600019846008026200044e565b1980831691505092915050565b60006200048983836200045b565b9150826002028217905092915050565b620004a4826200021f565b67ffffffffffffffff811115620004c057620004bf6200022a565b5b620004cc825462000288565b620004d9828285620003fe565b600060209050601f831160018114620005115760008415620004fc578287015190505b6200050885826200047b565b86555062000578565b601f1984166200052186620002bd565b60005b828110156200054b5784890151825560018201915060208501945060208101905062000524565b868310156200056b578489015162000567601f8916826200045b565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f546f6b656e2061646472657373206973207a65726f2061646472657373000000600082015250565b6000620005c9601d8362000580565b9150620005d68262000591565b602082019050919050565b60006020820190508181036000830152620005fc81620005ba565b9050919050565b61275380620006136000396000f3fe60806040526004361061011f5760003560e01c80638a9118c0116100a0578063b4b010d411610064578063b4b010d41461043d578063dd62ed3e1461047a578063e086503c146104b7578063f1d9f88b146104c1578063fd04bf69146104ec5761011f565b80638a9118c01461032f57806395d89b411461035a5780639c8f9f2314610385578063a457c2d7146103c3578063a9059cbb146104005761011f565b80632c7f963d116100e75780632c7f963d1461021d578063313ce5671461025a578063395093511461028557806351c6590a146102c257806370a08231146102f25761011f565b806306fdde0314610124578063095ea7b31461014f5780630f39d3d41461018c57806318160ddd146101b557806323b872dd146101e0575b600080fd5b34801561013057600080fd5b50610139610529565b6040516101469190611a00565b60405180910390f35b34801561015b57600080fd5b5061017660048036038101906101719190611abb565b6105bb565b6040516101839190611b16565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611b31565b6105de565b005b3480156101c157600080fd5b506101ca6106e2565b6040516101d79190611b6d565b60405180910390f35b3480156101ec57600080fd5b5061020760048036038101906102029190611b88565b6106ec565b6040516102149190611b16565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f9190611bdb565b61071b565b6040516102519190611b6d565b60405180910390f35b34801561026657600080fd5b5061026f6107c0565b60405161027c9190611c4a565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190611abb565b6107c9565b6040516102b99190611b16565b60405180910390f35b6102dc60048036038101906102d79190611b31565b610800565b6040516102e99190611b6d565b60405180910390f35b3480156102fe57600080fd5b5061031960048036038101906103149190611c65565b610ae8565b6040516103269190611b6d565b60405180910390f35b34801561033b57600080fd5b50610344610b30565b6040516103519190611b6d565b60405180910390f35b34801561036657600080fd5b5061036f610b38565b60405161037c9190611a00565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190611b31565b610bca565b6040516103ba929190611c92565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e59190611abb565b610d5b565b6040516103f79190611b16565b60405180910390f35b34801561040c57600080fd5b5061042760048036038101906104229190611abb565b610dd2565b6040516104349190611b16565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f9190611b31565b610df5565b6040516104719190611b6d565b60405180910390f35b34801561048657600080fd5b506104a1600480360381019061049c9190611cbb565b610ebb565b6040516104ae9190611b6d565b60405180910390f35b6104bf610f42565b005b3480156104cd57600080fd5b506104d6611007565b6040516104e39190611b6d565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e9190611b31565b6110aa565b6040516105209190611b6d565b60405180910390f35b60606003805461053890611d2a565b80601f016020809104026020016040519081016040528092919081815260200182805461056490611d2a565b80156105b15780601f10610586576101008083540402835291602001916105b1565b820191906000526020600020905b81548152906001019060200180831161059457829003601f168201915b5050505050905090565b6000806105c6611170565b90506105d3818585611178565b600191505092915050565b60006105f2826105ec611007565b4761071b565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161065393929190611d6a565b6020604051808303816000875af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190611dcd565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106dd573d6000803e3d6000fd5b505050565b6000600254905090565b6000806106f7611170565b9050610704858285611341565b61070f8585856113cd565b60019150509392505050565b6000808311801561072c5750600082115b61076b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076290611e6c565b60405180910390fd5b600084605f61077a9190611ebb565b8460646107879190611ebb565b6107919190611efd565b85605f61079e9190611ebb565b846107a99190611ebb565b6107b39190611f60565b9050809150509392505050565b60006012905090565b6000806107d4611170565b90506107f58185856107e68589610ebb565b6107f09190611efd565b611178565b600191505092915050565b6000803411610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083b90611fdd565b60405180910390fd5b60008061084f611007565b905060008103610952576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016108ba93929190611d6a565b6020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190611dcd565b90508061093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093690612049565b60405180910390fd5b47925061094c3384611643565b50610ade565b344761095e9190612069565b9050600061096a611007565b9050600082823461097b9190611ebb565b6109859190611f60565b9050808610156109ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c19061210f565b60405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610a2b93929190611d6a565b6020604051808303816000875af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e9190611dcd565b905080610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790612049565b60405180910390fd5b8334610aba6106e2565b610ac49190611ebb565b610ace9190611f60565b9450610ada3386611643565b5050505b8192505050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b606060048054610b4790611d2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7390611d2a565b8015610bc05780601f10610b9557610100808354040283529160200191610bc0565b820191906000526020600020905b815481529060010190602001808311610ba357829003601f168201915b5050505050905090565b6000806000610bd76106e2565b4785610be39190611ebb565b610bed9190611f60565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c35573d6000803e3d6000fd5b506000610c406106e2565b610c48611007565b86610c539190611ebb565b610c5d9190611f60565b9050610c693386611799565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610cc892919061212f565b6020604051808303816000875af1158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190611dcd565b905080610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490612049565b60405180910390fd5b828294509450505050915091565b600080610d66611170565b90506000610d748286610ebb565b905083811015610db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db0906121ca565b60405180910390fd5b610dc68286868403611178565b60019250505092915050565b600080610ddd611170565b9050610dea8185856113cd565b600191505092915050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e5391906121ea565b602060405180830381865afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e94919061221a565b90506000479050808285610ea89190611ebb565b610eb29190611f60565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610f61343447610f549190612069565b610f5c611007565b61071b565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610fc092919061212f565b6020604051808303816000875af1158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190611dcd565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161106491906121ea565b602060405180830381865afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a5919061221a565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161110891906121ea565b602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611149919061221a565b9050600047905081818561115d9190611ebb565b6111679190611f60565b92505050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de906122b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124d9061234b565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516113349190611b6d565b60405180910390a3505050565b600061134d8484610ebb565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113c757818110156113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b0906123b7565b60405180910390fd5b6113c68484848403611178565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361143c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143390612449565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a2906124db565b60405180910390fd5b6114b6838383611966565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561153c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115339061256d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161162a9190611b6d565b60405180910390a361163d84848461196b565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a9906125d9565b60405180910390fd5b6116be60008383611966565b80600260008282546116d09190611efd565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117819190611b6d565b60405180910390a36117956000838361196b565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ff9061266b565b60405180910390fd5b61181482600083611966565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561189a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611891906126fd565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161194d9190611b6d565b60405180910390a36119618360008461196b565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119aa57808201518184015260208101905061198f565b60008484015250505050565b6000601f19601f8301169050919050565b60006119d282611970565b6119dc818561197b565b93506119ec81856020860161198c565b6119f5816119b6565b840191505092915050565b60006020820190508181036000830152611a1a81846119c7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a5282611a27565b9050919050565b611a6281611a47565b8114611a6d57600080fd5b50565b600081359050611a7f81611a59565b92915050565b6000819050919050565b611a9881611a85565b8114611aa357600080fd5b50565b600081359050611ab581611a8f565b92915050565b60008060408385031215611ad257611ad1611a22565b5b6000611ae085828601611a70565b9250506020611af185828601611aa6565b9150509250929050565b60008115159050919050565b611b1081611afb565b82525050565b6000602082019050611b2b6000830184611b07565b92915050565b600060208284031215611b4757611b46611a22565b5b6000611b5584828501611aa6565b91505092915050565b611b6781611a85565b82525050565b6000602082019050611b826000830184611b5e565b92915050565b600080600060608486031215611ba157611ba0611a22565b5b6000611baf86828701611a70565b9350506020611bc086828701611a70565b9250506040611bd186828701611aa6565b9150509250925092565b600080600060608486031215611bf457611bf3611a22565b5b6000611c0286828701611aa6565b9350506020611c1386828701611aa6565b9250506040611c2486828701611aa6565b9150509250925092565b600060ff82169050919050565b611c4481611c2e565b82525050565b6000602082019050611c5f6000830184611c3b565b92915050565b600060208284031215611c7b57611c7a611a22565b5b6000611c8984828501611a70565b91505092915050565b6000604082019050611ca76000830185611b5e565b611cb46020830184611b5e565b9392505050565b60008060408385031215611cd257611cd1611a22565b5b6000611ce085828601611a70565b9250506020611cf185828601611a70565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d4257607f821691505b602082108103611d5557611d54611cfb565b5b50919050565b611d6481611a47565b82525050565b6000606082019050611d7f6000830186611d5b565b611d8c6020830185611d5b565b611d996040830184611b5e565b949350505050565b611daa81611afb565b8114611db557600080fd5b50565b600081519050611dc781611da1565b92915050565b600060208284031215611de357611de2611a22565b5b6000611df184828501611db8565b91505092915050565b7f446578207265736572766573206861766520746f20626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b6000611e5660298361197b565b9150611e6182611dfa565b604082019050919050565b60006020820190508181036000830152611e8581611e49565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ec682611a85565b9150611ed183611a85565b9250828202611edf81611a85565b91508282048414831517611ef657611ef5611e8c565b5b5092915050565b6000611f0882611a85565b9150611f1383611a85565b9250828201905080821115611f2b57611f2a611e8c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f6b82611a85565b9150611f7683611a85565b925082611f8657611f85611f31565b5b828204905092915050565b7f4e6f2045544820537570706c6965640000000000000000000000000000000000600082015250565b6000611fc7600f8361197b565b9150611fd282611f91565b602082019050919050565b60006020820190508181036000830152611ff681611fba565b9050919050565b7f4661696c656420746f207472616e73666572205a524f00000000000000000000600082015250565b600061203360168361197b565b915061203e82611ffd565b602082019050919050565b6000602082019050818103600083015261206281612026565b9050919050565b600061207482611a85565b915061207f83611a85565b925082820390508181111561209757612096611e8c565b5b92915050565b7f496e636f727265637420726174696f206f6620746f6b656e732070726f76696460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006120f960228361197b565b91506121048261209d565b604082019050919050565b60006020820190508181036000830152612128816120ec565b9050919050565b60006040820190506121446000830185611d5b565b6121516020830184611b5e565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006121b460258361197b565b91506121bf82612158565b604082019050919050565b600060208201905081810360008301526121e3816121a7565b9050919050565b60006020820190506121ff6000830184611d5b565b92915050565b60008151905061221481611a8f565b92915050565b6000602082840312156122305761222f611a22565b5b600061223e84828501612205565b91505092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122a360248361197b565b91506122ae82612247565b604082019050919050565b600060208201905081810360008301526122d281612296565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061233560228361197b565b9150612340826122d9565b604082019050919050565b6000602082019050818103600083015261236481612328565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006123a1601d8361197b565b91506123ac8261236b565b602082019050919050565b600060208201905081810360008301526123d081612394565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061243360258361197b565b915061243e826123d7565b604082019050919050565b6000602082019050818103600083015261246281612426565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006124c560238361197b565b91506124d082612469565b604082019050919050565b600060208201905081810360008301526124f4816124b8565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061255760268361197b565b9150612562826124fb565b604082019050919050565b600060208201905081810360008301526125868161254a565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006125c3601f8361197b565b91506125ce8261258d565b602082019050919050565b600060208201905081810360008301526125f2816125b6565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061265560218361197b565b9150612660826125f9565b604082019050919050565b6000602082019050818103600083015261268481612648565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006126e760228361197b565b91506126f28261268b565b604082019050919050565b60006020820190508181036000830152612716816126da565b905091905056fea2646970667358221220301d725715ca783dcb51c1ff84606ab8eb1c07e382d535084ad7216bfabe27f064736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80638a9118c0116100a0578063b4b010d411610064578063b4b010d41461043d578063dd62ed3e1461047a578063e086503c146104b7578063f1d9f88b146104c1578063fd04bf69146104ec5761011f565b80638a9118c01461032f57806395d89b411461035a5780639c8f9f2314610385578063a457c2d7146103c3578063a9059cbb146104005761011f565b80632c7f963d116100e75780632c7f963d1461021d578063313ce5671461025a578063395093511461028557806351c6590a146102c257806370a08231146102f25761011f565b806306fdde0314610124578063095ea7b31461014f5780630f39d3d41461018c57806318160ddd146101b557806323b872dd146101e0575b600080fd5b34801561013057600080fd5b50610139610529565b6040516101469190611a00565b60405180910390f35b34801561015b57600080fd5b5061017660048036038101906101719190611abb565b6105bb565b6040516101839190611b16565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611b31565b6105de565b005b3480156101c157600080fd5b506101ca6106e2565b6040516101d79190611b6d565b60405180910390f35b3480156101ec57600080fd5b5061020760048036038101906102029190611b88565b6106ec565b6040516102149190611b16565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f9190611bdb565b61071b565b6040516102519190611b6d565b60405180910390f35b34801561026657600080fd5b5061026f6107c0565b60405161027c9190611c4a565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190611abb565b6107c9565b6040516102b99190611b16565b60405180910390f35b6102dc60048036038101906102d79190611b31565b610800565b6040516102e99190611b6d565b60405180910390f35b3480156102fe57600080fd5b5061031960048036038101906103149190611c65565b610ae8565b6040516103269190611b6d565b60405180910390f35b34801561033b57600080fd5b50610344610b30565b6040516103519190611b6d565b60405180910390f35b34801561036657600080fd5b5061036f610b38565b60405161037c9190611a00565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190611b31565b610bca565b6040516103ba929190611c92565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e59190611abb565b610d5b565b6040516103f79190611b16565b60405180910390f35b34801561040c57600080fd5b5061042760048036038101906104229190611abb565b610dd2565b6040516104349190611b16565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f9190611b31565b610df5565b6040516104719190611b6d565b60405180910390f35b34801561048657600080fd5b506104a1600480360381019061049c9190611cbb565b610ebb565b6040516104ae9190611b6d565b60405180910390f35b6104bf610f42565b005b3480156104cd57600080fd5b506104d6611007565b6040516104e39190611b6d565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e9190611b31565b6110aa565b6040516105209190611b6d565b60405180910390f35b60606003805461053890611d2a565b80601f016020809104026020016040519081016040528092919081815260200182805461056490611d2a565b80156105b15780601f10610586576101008083540402835291602001916105b1565b820191906000526020600020905b81548152906001019060200180831161059457829003601f168201915b5050505050905090565b6000806105c6611170565b90506105d3818585611178565b600191505092915050565b60006105f2826105ec611007565b4761071b565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161065393929190611d6a565b6020604051808303816000875af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190611dcd565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106dd573d6000803e3d6000fd5b505050565b6000600254905090565b6000806106f7611170565b9050610704858285611341565b61070f8585856113cd565b60019150509392505050565b6000808311801561072c5750600082115b61076b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076290611e6c565b60405180910390fd5b600084605f61077a9190611ebb565b8460646107879190611ebb565b6107919190611efd565b85605f61079e9190611ebb565b846107a99190611ebb565b6107b39190611f60565b9050809150509392505050565b60006012905090565b6000806107d4611170565b90506107f58185856107e68589610ebb565b6107f09190611efd565b611178565b600191505092915050565b6000803411610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083b90611fdd565b60405180910390fd5b60008061084f611007565b905060008103610952576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016108ba93929190611d6a565b6020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190611dcd565b90508061093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093690612049565b60405180910390fd5b47925061094c3384611643565b50610ade565b344761095e9190612069565b9050600061096a611007565b9050600082823461097b9190611ebb565b6109859190611f60565b9050808610156109ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c19061210f565b60405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610a2b93929190611d6a565b6020604051808303816000875af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e9190611dcd565b905080610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790612049565b60405180910390fd5b8334610aba6106e2565b610ac49190611ebb565b610ace9190611f60565b9450610ada3386611643565b5050505b8192505050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b606060048054610b4790611d2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7390611d2a565b8015610bc05780601f10610b9557610100808354040283529160200191610bc0565b820191906000526020600020905b815481529060010190602001808311610ba357829003601f168201915b5050505050905090565b6000806000610bd76106e2565b4785610be39190611ebb565b610bed9190611f60565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c35573d6000803e3d6000fd5b506000610c406106e2565b610c48611007565b86610c539190611ebb565b610c5d9190611f60565b9050610c693386611799565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610cc892919061212f565b6020604051808303816000875af1158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190611dcd565b905080610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490612049565b60405180910390fd5b828294509450505050915091565b600080610d66611170565b90506000610d748286610ebb565b905083811015610db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db0906121ca565b60405180910390fd5b610dc68286868403611178565b60019250505092915050565b600080610ddd611170565b9050610dea8185856113cd565b600191505092915050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e5391906121ea565b602060405180830381865afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e94919061221a565b90506000479050808285610ea89190611ebb565b610eb29190611f60565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610f61343447610f549190612069565b610f5c611007565b61071b565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610fc092919061212f565b6020604051808303816000875af1158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190611dcd565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161106491906121ea565b602060405180830381865afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a5919061221a565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161110891906121ea565b602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611149919061221a565b9050600047905081818561115d9190611ebb565b6111679190611f60565b92505050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de906122b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124d9061234b565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516113349190611b6d565b60405180910390a3505050565b600061134d8484610ebb565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113c757818110156113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b0906123b7565b60405180910390fd5b6113c68484848403611178565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361143c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143390612449565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a2906124db565b60405180910390fd5b6114b6838383611966565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561153c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115339061256d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161162a9190611b6d565b60405180910390a361163d84848461196b565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a9906125d9565b60405180910390fd5b6116be60008383611966565b80600260008282546116d09190611efd565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117819190611b6d565b60405180910390a36117956000838361196b565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ff9061266b565b60405180910390fd5b61181482600083611966565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561189a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611891906126fd565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161194d9190611b6d565b60405180910390a36119618360008461196b565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119aa57808201518184015260208101905061198f565b60008484015250505050565b6000601f19601f8301169050919050565b60006119d282611970565b6119dc818561197b565b93506119ec81856020860161198c565b6119f5816119b6565b840191505092915050565b60006020820190508181036000830152611a1a81846119c7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a5282611a27565b9050919050565b611a6281611a47565b8114611a6d57600080fd5b50565b600081359050611a7f81611a59565b92915050565b6000819050919050565b611a9881611a85565b8114611aa357600080fd5b50565b600081359050611ab581611a8f565b92915050565b60008060408385031215611ad257611ad1611a22565b5b6000611ae085828601611a70565b9250506020611af185828601611aa6565b9150509250929050565b60008115159050919050565b611b1081611afb565b82525050565b6000602082019050611b2b6000830184611b07565b92915050565b600060208284031215611b4757611b46611a22565b5b6000611b5584828501611aa6565b91505092915050565b611b6781611a85565b82525050565b6000602082019050611b826000830184611b5e565b92915050565b600080600060608486031215611ba157611ba0611a22565b5b6000611baf86828701611a70565b9350506020611bc086828701611a70565b9250506040611bd186828701611aa6565b9150509250925092565b600080600060608486031215611bf457611bf3611a22565b5b6000611c0286828701611aa6565b9350506020611c1386828701611aa6565b9250506040611c2486828701611aa6565b9150509250925092565b600060ff82169050919050565b611c4481611c2e565b82525050565b6000602082019050611c5f6000830184611c3b565b92915050565b600060208284031215611c7b57611c7a611a22565b5b6000611c8984828501611a70565b91505092915050565b6000604082019050611ca76000830185611b5e565b611cb46020830184611b5e565b9392505050565b60008060408385031215611cd257611cd1611a22565b5b6000611ce085828601611a70565b9250506020611cf185828601611a70565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d4257607f821691505b602082108103611d5557611d54611cfb565b5b50919050565b611d6481611a47565b82525050565b6000606082019050611d7f6000830186611d5b565b611d8c6020830185611d5b565b611d996040830184611b5e565b949350505050565b611daa81611afb565b8114611db557600080fd5b50565b600081519050611dc781611da1565b92915050565b600060208284031215611de357611de2611a22565b5b6000611df184828501611db8565b91505092915050565b7f446578207265736572766573206861766520746f20626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b6000611e5660298361197b565b9150611e6182611dfa565b604082019050919050565b60006020820190508181036000830152611e8581611e49565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ec682611a85565b9150611ed183611a85565b9250828202611edf81611a85565b91508282048414831517611ef657611ef5611e8c565b5b5092915050565b6000611f0882611a85565b9150611f1383611a85565b9250828201905080821115611f2b57611f2a611e8c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f6b82611a85565b9150611f7683611a85565b925082611f8657611f85611f31565b5b828204905092915050565b7f4e6f2045544820537570706c6965640000000000000000000000000000000000600082015250565b6000611fc7600f8361197b565b9150611fd282611f91565b602082019050919050565b60006020820190508181036000830152611ff681611fba565b9050919050565b7f4661696c656420746f207472616e73666572205a524f00000000000000000000600082015250565b600061203360168361197b565b915061203e82611ffd565b602082019050919050565b6000602082019050818103600083015261206281612026565b9050919050565b600061207482611a85565b915061207f83611a85565b925082820390508181111561209757612096611e8c565b5b92915050565b7f496e636f727265637420726174696f206f6620746f6b656e732070726f76696460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006120f960228361197b565b91506121048261209d565b604082019050919050565b60006020820190508181036000830152612128816120ec565b9050919050565b60006040820190506121446000830185611d5b565b6121516020830184611b5e565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006121b460258361197b565b91506121bf82612158565b604082019050919050565b600060208201905081810360008301526121e3816121a7565b9050919050565b60006020820190506121ff6000830184611d5b565b92915050565b60008151905061221481611a8f565b92915050565b6000602082840312156122305761222f611a22565b5b600061223e84828501612205565b91505092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122a360248361197b565b91506122ae82612247565b604082019050919050565b600060208201905081810360008301526122d281612296565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061233560228361197b565b9150612340826122d9565b604082019050919050565b6000602082019050818103600083015261236481612328565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006123a1601d8361197b565b91506123ac8261236b565b602082019050919050565b600060208201905081810360008301526123d081612394565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061243360258361197b565b915061243e826123d7565b604082019050919050565b6000602082019050818103600083015261246281612426565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006124c560238361197b565b91506124d082612469565b604082019050919050565b600060208201905081810360008301526124f4816124b8565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061255760268361197b565b9150612562826124fb565b604082019050919050565b600060208201905081810360008301526125868161254a565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006125c3601f8361197b565b91506125ce8261258d565b602082019050919050565b600060208201905081810360008301526125f2816125b6565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061265560218361197b565b9150612660826125f9565b604082019050919050565b6000602082019050818103600083015261268481612648565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006126e760228361197b565b91506126f28261268b565b604082019050919050565b60006020820190508181036000830152612716816126da565b905091905056fea2646970667358221220301d725715ca783dcb51c1ff84606ab8eb1c07e382d535084ad7216bfabe27f064736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/Dex.sol:DecentralizedExchange",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/Dex.sol:DecentralizedExchange",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/Dex.sol:DecentralizedExchange",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/Dex.sol:DecentralizedExchange",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/Dex.sol:DecentralizedExchange",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 878,
        "contract": "contracts/Dex.sol:DecentralizedExchange",
        "label": "zroToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20)699"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)699": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}